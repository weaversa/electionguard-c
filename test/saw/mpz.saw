include "llvm.saw";

let {{
  from_mpz : {a, b} (fin a, fin b, a*64 >= b) => [a][64] -> [b]
  from_mpz List = drop (join List)
  
  to_mpz bv = groupBy`{64} (0#bv)

  /* moved to ElectionGuard
  
  /* Unsigned word extension. */
  uext : {a, b} (fin a, fin b) => [a] -> [a+b]
  uext x = zero # x

  /* Returns the sum of two inputs. */
  safe_add : {a} (fin a) => [a] -> [a] -> [a+1]
  safe_add x y = uext x + uext y

  /* Returns the subtraction of two inputs. */
  safe_sub : {a} (fin a) => [a] -> [a] -> [a+1]
  safe_sub x y = uext x - uext y

  /* Returns the product of two inputs. */
  safe_product : {a} (fin a) => [a] -> [a] -> [2*a]
  safe_product x y = uext x * uext y

  /* Returns module reduction on input. */
  safe_mod : {a, b} (fin a, fin b) => [a+b] -> [b] -> [b]
  safe_mod x p = drop (x % (uext p))

  /* Definition of modular multiplication. */
  mod_mul : {n} (fin n) => [n] -> [n] -> [n] -> [n]
  mod_mul x y p = safe_mod (safe_product x y) p
  
  /* Definition of modular exponentiation */
  //Will fail if p == 0

  mod_pow : {a} (fin a, a >= 1) => [a] -> [a] -> [a] -> [a]
  mod_pow a b p = (r!0).0
    where r = [ (1 % p, a % p) ]
            # [ (if bi then mod_mul ri ai p else ri,
                 mod_mul ai ai p)
              | (ri, ai) <- r
              | bi <- reverse b ]

*/

  cmp: {a, b} (fin a, fin b, b >= 1) => [a] -> [a] -> [b]
  cmp x y = if (x == y) then 0 else if (x < y) then (-1) else 1
}};

//%struct.__mpz_struct = type { i32, i32, i64* }
let mpz_t_setup (rw : Term) (n : Int) (name : String) = do {
  //Here we assume the ElectionGuard-C code will never reference any
  //of these arguments, so we co-opt them for other purposes.

  //Here we let the first argument represent the number of bits.
  nBits <- variable uint32_t (str_concat name ".nBits") (STALE {{ `n : [32] }});

  //Here we let the second argument represent the number of words.
  nWords <- variable uint32_t (str_concat name ".nWords") (STALE {{ `(n /^ 64) : [32] }});

  //Here we let the third argument be a pointer to an allocated list n/^64 64-bit words.
  value <- alloc rw (llvm_array (eval_int {{ `(n /^ 64) : [32] }}) uint64_t) (str_concat name ".value") FRESH;

  v <- struct [nBits.s, nWords.s, value.p];

  let (nBitst,  nWordst,  valuet) =
      (nBits.t, nWords.t, value.t);
  let vt = {{ {nBits=nBitst, nWords=nWordst, value=valuet} }};

  return {p=crucible_null, s=v.s, t=vt};
};

let mpz_t (rw : Term) (n : Int) (name : String) = do {
  v <- mpz_t_setup rw n name;
  vp <- pointer rw (struct_t "__mpz_struct");
  points_to vp v.s;
  return {p=vp, s=v.s, t=v.t};
};

let mpz_t' (rw : Term) (n : Int) (name : String) (vp : SetupValue) = do {
  v <- mpz_t_setup rw n name;
  points_to vp v.s;
  return {p=vp, s=v.s, t=v.t};
};


//void mpz_init (mpz_t x)
let mpz_init_spec (nBits : Int) = do {
  vp <- pointer WRITE (struct_t "__mpz_struct");

  execute [vp];

  x' <- mpz_t' WRITE nBits "x'" vp;

  let xt' = x'.t;
  equal (from_cryptol {{ from_mpz`{b=nBits} xt'.value }})
        (from_cryptol {{ 0 : [nBits] }});
};

let mpz_init_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_init" (mpz_init_spec n);


//void mpz_import (mpz_t rop, size_t count, int order, size_t size, int endian, size_t nails, const void *op)
let mpz_import_spec (count : Int) (size : Int) = do {
  ropp <- pointer WRITE (struct_t "__mpz_struct");
  op <- alloc CONST (llvm_array (eval_int {{ `(count * size) : [32] }}) uint8_t) "op" FRESH;

  execute [ropp, //!!! TODO fill these parameters in with fresh values later
           from_cryptol {{ `count : [64] }},
           from_cryptol {{ 1 : [32] }},
           from_cryptol {{ `size : [64] }},
           from_cryptol {{ 0 : [32] }},
           from_cryptol {{ 0 : [64] }},
           op.p];

  rop' <- mpz_t' WRITE (eval_int {{ `(count * size * 8) : [32] }}) "rop'" ropp;

  let (ropt', opt) = (rop'.t, op.t);
  equal (from_cryptol {{ from_mpz`{b=count*size*8} ropt'.value }})
        (from_cryptol {{ join (join [ reverse b | b <- groupBy`{8} opt]) }});
};

let mpz_import_ov bc n m = crucible_llvm_unsafe_assume_spec bc "__gmpz_import" (mpz_import_spec n m);


//void mpz_set_ui (mpz_t rop, unsigned long int op)
let mpz_set_ui_spec (nBits : Int) = do {
  ropp <- pointer WRITE (struct_t "__mpz_struct");
  op <- variable uint64_t "op" FRESH;

  execute [ropp, op.s];

  rop' <- mpz_t' WRITE nBits "rop'" ropp;

  let (ropt', opt) = (rop'.t, op.t);
  equal (from_cryptol {{ from_mpz`{b=nBits} ropt'.value }})
        (from_cryptol {{ 0#opt : [nBits] }});
};

let mpz_set_ui_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_set_ui" (mpz_set_ui_spec n);


//void mpz_add (mpz_t rop, const mpz_t op1, const mpz_t op2)
let mpz_add_spec (nBits : Int) = do {
  ropp <- pointer WRITE (struct_t "__mpz_struct");
  op1 <- mpz_t CONST nBits "op1";
  op2 <- mpz_t CONST nBits "op2";

  execute [ropp, op1.p, op2.p];

  rop' <- mpz_t' WRITE (eval_int {{ `nBits + 1 : [32] }}) "rop'" ropp;

  let (ropt', op1t, op2t) = (rop'.t, op1.t, op2.t);
  equal (from_cryptol {{ from_mpz`{b=nBits+1} ropt'.value }})
        (from_cryptol {{ safe_add (from_mpz`{b=nBits} op1t.value) (from_mpz`{b=nBits} op2t.value) }});
};

let mpz_add_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_add" (mpz_add_spec n);


//void mpz_add_ui (mpz_t rop, const mpz_t op1, unsigned long int op2)
let mpz_add_ui_spec (nBits : Int) = do {
  ropp <- pointer WRITE (struct_t "__mpz_struct");
  op1 <- mpz_t CONST nBits "op1";
  op2 <- variable uint64_t "op2" FRESH;

  execute [ropp, op1.p, op2.s];

  rop' <- mpz_t' WRITE nBits "rop'" ropp;

  let (ropt', op1t, op2t) = (rop'.t, op1.t, op2.t);
  equal (from_cryptol {{ from_mpz`{b=nBits} ropt'.value }})
        (from_cryptol {{ (from_mpz`{b=nBits} op1t.value) + (0 # op2t) }});

  postcond {{ carry (from_mpz`{b=nBits} op1t.value) + (0 # op2t) == False }};
};

let mpz_add_ui_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_add_ui" (mpz_add_ui_spec n);

//void mpz_add_ui (mpz_t rop, mpz_t rop, unsigned long int op2)
let mpz_add_ui_r_r_spec (nBits : Int) = do {
  rop <- mpz_t WRITE nBits "r";
  op2 <- variable uint64_t "op2" FRESH;

  execute [rop.p, rop.p, op2.s];

  rop' <- mpz_t' WRITE nBits "rop'" rop.p;

  let (ropt', ropt, op2t) = (rop'.t, rop.t, op2.t);
  equal (from_cryptol {{ from_mpz`{b=nBits} ropt'.value }})
        (from_cryptol {{ (from_mpz`{b=nBits} ropt.value) + (0 # op2t) }});

  postcond {{ carry (from_mpz`{b=nBits} ropt.value) (0 # op2t) == False }};
};

let mpz_add_ui_r_r_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_add_ui" (mpz_add_ui_r_r_spec n);


//void mpz_sub (mpz_t rop, const mpz_t op1, const mpz_t op2)
let mpz_sub_spec (nBits : Int) = do {
  ropp <- pointer WRITE (struct_t "__mpz_struct");
  op1 <- mpz_t CONST nBits "op1";
  op2 <- mpz_t CONST nBits "op2";

  execute [ropp, op1.p, op2.p];

  rop' <- mpz_t' WRITE (eval_int {{ `nBits + 1 : [32] }}) "rop'" ropp;

  let (ropt', op1t, op2t) = (rop'.t, op1.t, op2.t);
  equal (from_cryptol {{ from_mpz`{b=nBits+1} ropt'.value }})
        (from_cryptol {{ safe_sub (from_mpz`{b=nBits} op1t.value) (from_mpz`{b=nBits} op2t.value) }});
};

let mpz_sub_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_sub" (mpz_sub_spec n);


//void mpz_mul (mpz_t rop, const mpz_t op1, const mpz_t op2)
let mpz_mul_spec (nBits : Int) = do {
  ropp <- pointer WRITE (struct_t "__mpz_struct");
  op1 <- mpz_t CONST nBits "op1";
  op2 <- mpz_t CONST nBits "op2";

  execute [ropp, op1.p, op2.p];

  rop' <- mpz_t' WRITE (eval_int {{ `nBits * 2 : [32] }}) "rop'" ropp;

  let (ropt', op1t, op2t) = (rop'.t, op1.t, op2.t);
  equal (from_cryptol {{ from_mpz`{b=nBits*2} ropt'.value }})
        (from_cryptol {{ safe_product (from_mpz`{b=nBits} op1t.value) (from_mpz`{b=nBits} op2t.value) }});
};

let mpz_mul_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_mul" (mpz_mul_spec n);


//void mpz_mul (mpz_t rop, mpz_t rop, const mpz_t op2)
let mpz_mul_r_r_spec (nBits : Int) = do {
  rop <- mpz_t WRITE nBits "rop";
  op2 <- mpz_t CONST nBits "op2";

  execute [rop.p, rop.p, op2.p];

  rop' <- mpz_t' WRITE (eval_int {{ `nBits * 2 : [32] }}) "rop'" rop.p;

  let (ropt', ropt, op2t) = (rop'.t, rop.t, op2.t);
  equal (from_cryptol {{ from_mpz`{b=nBits*2} ropt'.value }})
        (from_cryptol {{ safe_product (from_mpz`{b=nBits} ropt.value) (from_mpz`{b=nBits} op2t.value) }});
};

let mpz_mul_r_r_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_mul" (mpz_mul_r_r_spec n);


//void mpz_mod (mpz_t r, const mpz_t n, const mpz_t d)
let mpz_mod_spec (in_Bits : Int) (res_Bits : Int) = do {
  rp <- pointer WRITE (struct_t "__mpz_struct");
  n <- mpz_t CONST in_Bits "n";
  d <- mpz_t CONST res_Bits "d";

  execute [rp, n.p, d.p];

  r' <- mpz_t' WRITE res_Bits "r'" rp;
  let (rt', nt, dt) = (r'.t, n.t, d.t);
  equal (from_cryptol {{ from_mpz`{b=res_Bits} rt'.value }})
        (from_cryptol {{ safe_mod (from_mpz`{b=in_Bits} nt.value) (from_mpz`{b=res_Bits} dt.value) }});
};

let mpz_mod_ov bc n m = crucible_llvm_unsafe_assume_spec bc "__gmpz_mod" (mpz_mod_spec n m);


//void mpz_mod (mpz_t r, mpz_t r, const mpz_t d)
let mpz_mod_r_r_spec (in_Bits : Int) (res_Bits : Int) = do {
  r <- mpz_t WRITE in_Bits "r";
  d <- mpz_t CONST res_Bits "d";

  execute [r.p, r.p, d.p];

  r' <- mpz_t' WRITE res_Bits "r'" r.p;

  let (rt', rt, dt) = (r'.t, r.t, d.t);
  equal (from_cryptol {{ from_mpz`{b=res_Bits} rt'.value }})
        (from_cryptol {{ safe_mod (from_mpz`{b=in_Bits} rt.value) (from_mpz`{b=res_Bits} dt.value) }});
};

let mpz_mod_r_r_ov bc n m = crucible_llvm_unsafe_assume_spec bc "__gmpz_mod" (mpz_mod_r_r_spec n m);


//void mpz_powm (mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod)
let mpz_powm_spec (nBits : Int) = do {
  ropp <- pointer WRITE (struct_t "__mpz_struct");
  base <- mpz_t CONST nBits "base";
  exp <- mpz_t CONST nBits "exp";
  mod <- mpz_t CONST nBits "mod";

  execute [ ropp, base.p, exp.p, mod.p];

  rop' <- mpz_t' WRITE nBits "rop'" ropp;

  let (ropt', baset, expt, modt) = (rop'.t, base.t, exp.t, mod.t);
  equal (from_cryptol {{ from_mpz`{b=nBits} ropt'.value }})
        (from_cryptol {{ mod_pow (from_mpz`{b=nBits} baset.value)
	                         (from_mpz`{b=nBits} expt.value)
				 (from_mpz`{b=nBits} modt.value) }});
};

let mpz_powm_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_powm" (mpz_powm_spec n);


//int mpz_cmp (const mpz_t op1, const mpz_t op2)
let mpz_cmp_spec (nBits : Int) = do {
  op1 <- mpz_t CONST nBits "op1";
  op2 <- mpz_t CONST nBits "op2";

  execute [ op1.p, op2.p];

  let (op1t, op2t) = (op1.t, op2.t);
  let prop = from_cryptol {{ (cmp (from_mpz `{b=nBits} op1t.value)
                                  (from_mpz `{b=nBits} op2t.value)):[32] }};
  crucible_return (prop);
};

let mpz_cmp_ov bc n = crucible_llvm_unsafe_assume_spec bc "__gmpz_cmp" (mpz_cmp_spec n);
