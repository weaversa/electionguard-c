include "llvm.saw";
import "SHA256.cry";

sha256_bc <- llvm_load_module "obj/sha256.bc";

let {{
 rev_endian_32 v = join (reverse (split `{4} v))
}};
let ctx_struct (name : String) = do {
  state <- variable (llvm_array 8 (llvm_int 32)) (str_concat name ".state") FRESH;
  bitcount <- variable (llvm_array 2 (llvm_int 64)) (str_concat name ".bitcount") FRESH;
  buffer <- variable (llvm_array 128 (llvm_int 8)) (str_concat name ".buffer") FRESH;
  ctx <- struct [(crucible_struct [state.s]), bitcount.s, buffer.s];

  let (statet, bitcount, buffert) = (state.t, bitcount.t, buffer.t);
  // define a record so we can access the term like with .field
  let ctxt = {{ {state=statet, bitcount=bitcount, buffer=buffert} }};
  return {p=crucible_null, s=ctx.s, t=ctxt};
};

let ctx_new_ptr (name : String) = do {
  ctx <- ctx_struct name;
  ctxp <- pointer WRITE (llvm_struct "struct._SHA2_CTX") ;
  points_to ctxp ctx.s;  
  return {p=ctxp, s=ctx.s, t=ctx.t};
};

let ctx_assign_ptr (name: String) (ctxp : SetupValue) = do {
  ctx <- ctx_struct name;
  points_to ctxp ctx.s;  
  return {p=ctxp, s=ctx.s, t=ctx.t};
};


let sha256init_spec = do {
  ctx <- ctx_new_ptr "pre_init";

  execute [ctx.p];
  
  res <- ctx_assign_ptr "post_init" ctx.p;
  let post_ctx = res.t;


  postcond {{ (post_ctx.state == H0) /\
              (post_ctx.bitcount @ 0) == zero /\
              (post_ctx.buffer @ 0) == zero
	   }};
};


//void @SHA256Transform(%struct._SHA2_CTX* %0, i8* %1)
let sha256transform_spec = do {
  ctx <- ctx_new_ptr "pre_hash";
  data <- alloc CONST (llvm_array 64 (llvm_int 8)) "data" FRESH;

  execute [ctx.p, data.p];

  res <- ctx_assign_ptr "post_hash" ctx.p;

  let (pre_ctx, post_ctx, data_term) = (ctx.t, res.t, data.t);

  points_to data.p data.s;

  postcond {{ SHA256Block pre_ctx.state (split`{16} (join data_term)) == post_ctx.state}};
  postcond {{ pre_ctx.bitcount == post_ctx.bitcount}};
  postcond {{ pre_ctx.buffer == post_ctx.buffer}};
};

let sha256update_spec = do {
  ctx <- ctx_new_ptr "preupdate_hash";

  let ctxt = ctx.t;

  precond {{ ctxt.bitcount @ 0 == zero }};

  data <- alloc CONST (llvm_array 64 (llvm_int 8)) "data" FRESH;

  len <- variable uint64_t "len" (STALE {{ 64 : [64] }});
  
  execute [ctx.p, data.p, len.s];

  res <- ctx_assign_ptr "postupdate_hash" ctx.p;

  let (pre_ctx, post_ctx, data_term) = (ctx.t, res.t, data.t);

  postcond {{ (SHA256Update pre_state data_term).h == post_ctx.state
              where pre_state = {h=pre_ctx.state,
	                         block=pre_ctx.buffer @@ [0..63],
				 n=0,
				 sz=zero}
	   }};
};

let test_sha256_spec (n : Int) = do {
  ctx <- ctx_new_ptr "context";
  digest <- alloc WRITE (llvm_array 32 (llvm_int 8)) "pre_digest" FRESH;
  data <- alloc CONST (llvm_array n (llvm_int 8)) "data" FRESH;
  len <- variable uint64_t "len" (STALE {{ `n : [64] }});

  execute [ctx.p, digest.p, data.p, len.s];

/*
  // just test update
  res <- ctx_assign_ptr "postupdate_hash" ctx.p;

  let (pre_ctx, post_ctx, data_term) = (ctx.t, res.t, data.t);

  postcond {{ post_ctx.state == (SHA256Update SHA256Init data_term).h }};
*/

/*
  // test the full thing
  computed_digest <- variable (llvm_array 32 (llvm_int 8)) "post_digest" FRESH;
  points_to digest.p computed_digest.s;

  let (computed_digest_t, data_t) = (computed_digest.t, data.t);
  postcond {{ join computed_digest_t == (SHA256Final (SHA256Update SHA256Init data_t)) }};
*/
};

sha256transform_ov <- crucible_llvm_unsafe_assume_spec sha256_bc "SHA256Transform" sha256transform_spec;
init_ov <- crucible_llvm_verify sha256_bc "SHA256Init" [] true sha256init_spec abc;
update_ov <- crucible_llvm_verify sha256_bc "SHA256Update" [sha256transform_ov] true sha256update_spec yices;

/* this fails because sha256transform appears to be trying to read 64 bytes where as
   it only got passed two. But I would have thought it would have been prevented by the while statement
   on line 489 of sha2-openbsd.c

   However, without update_ov, it successfully emulates
*/
//crucible_llvm_verify sha256_bc "test_SHA256" [init_ov, update_ov, sha256transform_ov] true (test_sha256_spec 2) yices;


/* this fails because sha256transform is being asked to hash data that is part of the SHA2_CTX structure.
   SAW complains about non-disjoint memory regions.
*/
//crucible_llvm_verify sha256_bc "test_SHA256" [init_ov, sha256transform_ov] true (test_sha256_spec 64) yices;
