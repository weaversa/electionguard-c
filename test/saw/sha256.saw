include "llvm.saw";
import "SHA256.cry";

sha256_bc <- llvm_load_module "obj/sha256.bc";

let {{
 rev_endian_32 v = join (reverse (split `{4} v))
}};

let sha256init_spec = do {
  vp <- pointer WRITE (struct_t "_SHA2_CTX");
  
  execute [vp];

  crucible_points_to_untyped (crucible_field vp "state") (from_cryptol {{ H0 }});
};

let ctx_struct (name : String) = do {
  state <- variable (llvm_array 8 (llvm_int 32)) (str_concat name ".state") FRESH;
  bitcount <- variable (llvm_array 2 (llvm_int 64)) (str_concat name ".bitcount") FRESH;
  buffer <- variable (llvm_array 128 (llvm_int 8)) (str_concat name ".buffer") FRESH;
  ctx <- struct [(crucible_struct [state.s]), bitcount.s, buffer.s];

  let (statet, bitcount, buffert) = (state.t, bitcount.t, buffer.t);
  // define a record so we can access the term like with .field
  let ctxt = {{ {state=statet, bitcount=bitcount, buffer=buffert} }};
  return {p=crucible_null, s=ctx.s, t=ctxt};
};

let ctx_new_ptr (name : String) = do {
  ctx <- ctx_struct name;
  ctxp <- pointer WRITE (llvm_struct "struct._SHA2_CTX") ;
  points_to ctxp ctx.s;  
  return {p=ctxp, s=ctx.s, t=ctx.t};
};

let ctx_assign_ptr (name: String) (ctxp : SetupValue) = do {
  ctx <- ctx_struct name;
  points_to ctxp ctx.s;  
  return {p=ctxp, s=ctx.s, t=ctx.t};
};

//void @SHA256Transform(%struct._SHA2_CTX* %0, i8* %1)
let sha256transform_spec = do {
  ctx <- ctx_new_ptr "pre_hash";
  data <- alloc CONST (llvm_array 64 (llvm_int 8)) "data" FRESH;

  execute [ctx.p, data.p];

  res <- ctx_assign_ptr "post_hash" ctx.p;

  let (pre_ctx, post_ctx, data_term) = (ctx.t, res.t, data.t);

  postcond {{ SHA256Block pre_ctx.state (split`{16} (join data_term)) == post_ctx.state}};
};

let sha256update_spec = do {
  ctx <- ctx_new_ptr "preupdate_hash";

  data <- alloc CONST (llvm_array 512 (llvm_int 8)) "data" FRESH;

  len <- variable uint64_t "len" (STALE {{ 512 : [64] }});
  
  execute [ctx.p, data.p, len.s];
};

//sha256transform_ov <- crucible_llvm_unsafe_assume_spec sha256_bc "SHA256Transform" sha256transform_spec;
//crucible_llvm_verify sha256_bc "SHA256Init" [] true sha256init_spec abc;
//crucible_llvm_verify sha256_bc "SHA256Transform" [] true sha256transform_spec (unint_yices []);
sha256transform_ov <- crucible_llvm_verify sha256_bc "SHA256Transform" [] true sha256transform_spec (quickcheck 10);
//crucible_llvm_verify sha256_bc "SHA256Transform" [] true sha256transform_spec abc;
crucible_llvm_verify sha256_bc "SHA256Update" [sha256transform_ov] true sha256update_spec yices;
//crucible_llvm_verify sha256_bc "SHA256Update" [] true sha256update_spec yices;
